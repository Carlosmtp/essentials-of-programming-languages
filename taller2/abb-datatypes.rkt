#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.9 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(1
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(2
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(3
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 93 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 36 36 140
255 255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 34 139 34
255 255 255 -1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 90 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 70 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1           0 1358 0 28 3 10 #"#lang eopl"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         133 21           0 0           0 21 0 14 3 6 #"Taller"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 5 #"Punto"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 14 3 6 #"\303\201rbol"
0 0 24 3 1 #" "
0 0 14 3 7 #"Binario"
0 0 24 3 1 #" "
0 0 14 3 2 #"de"
0 0 24 3 1 #" "
0 0 14 3 9 #"B\303\272squeda"
0 0 24 3 1 #" "
0 0 14 3 3 #"con"
0 0 24 3 1 #" "
0 0 14 3 9 #"Datatypes"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";Diana Katherine Toro Ortiz - 2110046"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";Carlos Mauricio Tovar Parra - 1741699"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";Juan Pablo Velasco Mellizo - 1766616"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 9         133 21           0 0           0 21 0 24 3 7 #"       "
0 0 14 3 10 #"Gram\303\241tica"
0 0 24 3 1 #" "
0 0 14 3 6 #"\303\201rbol"
0 0 24 3 1 #" "
0 0 14 3 7 #"Binario"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 14 3 7 #"Bintree"
0 0 24 3 1 #" "
0 0 14 3 3 #"::="
0 0 24 3 4 #" () "
0 0 14 3 1 #"l"
0 0 24 3 2 #" ("
0 0 14 3 3 #"Int"
0 0 24 3 1 #" "
0 0 14 3 7 #"Bintree"
0 0 24 3 1 #" "
0 0 14 3 7 #"Bintree"
0 0 24 3 1 #")"
0           0 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(4
 #";---------------------------------------Datatype---------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #";bintree"
0 0 17 3 1 #" "
0 0 17 3 26 #": ()|(node (number X left "
0 0 17 3 1 #"X"
0 0 17 3 1 #" "
0 0 17 3 8 #"right)) "
0 0 17 3 3 #"\342\206\222"
0 0 17 3 9 #" bintree "
0 0 24 29 1 #"\n"
0 0 17 3 65
(5
 #";usage : (bintree) = constructor del \xC3\xA1rbol binario con datatyp"
 #"es"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 8 #"bintree?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 8 #"bintree?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 5 #"right"
0 0 24 3 1 #" "
0 0 14 3 8 #"bintree?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(6
 #";---------------------------------------Unparse----------------------"
 #"-----------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57
#";parse-bintree : sintaxis abstracta \342\206\222 sintaxis concreta"
0 0 24 29 1 #"\n"
0 0 17 3 75
(7
 #";usage : (parse-bintree arbol) = retorna arbol binario en sintaxis co"
 #"ncreta"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"unparse-bintree"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"arbolB"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbolB"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 1 #"'"
0 0 14 3 4 #"left"
0 0 24 3 2 #" ("
0 0 14 3 15 #"unparse-bintree"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 21 3 1 #"'"
0 0 14 3 5 #"right"
0 0 24 3 2 #" ("
0 0 14 3 15 #"unparse-bintree"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";prueba :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"unparse-bintree"
0 0 24 3 2 #" ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 80
(8
 #";---------------------------------------Parse------------------------"
 #"-----------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57
#";parse-bintree : sintaxis concreta \342\206\222 sintaxis abstracta"
0 0 24 29 1 #"\n"
0 0 17 3 76
(9
 #";usage : (parse-bintree arbol) = retorna arbol binario en sintaxis ab"
 #"stracta"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"parse-bintree"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"arbolB"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbolB"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbolB"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbolB"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 4 #"left"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbolB"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 14 3 5 #"right"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 4 #"node"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbolB"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"parse-bintree"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbolB"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"parse-bintree"
0 0 24 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbolB"
0 0 24 3 11 #"))))]      "
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #";prueba :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"parse-bintree"
0 0 24 3 1 #"("
0 0 14 3 15 #"unparse-bintree"
0 0 24 3 2 #" ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 81
(10
 #";---------------------------------------Funciones--------------------"
 #"------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";current-element : bintree \342\206\222 raiz"
0 0 24 29 1 #"\n"
0 0 17 3 78
(11
 #";usage : (current-element arbol) = retorna el elemento raiz del \xC3"
 #"\xA1rbol binario"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"current-element"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 3 #"num"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";pruebas :"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 2 #" ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101
(12
 #";--------------------------------------------------------------------"
 #"--------------------------------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";move-to-left-son : bintree \342\206\222 list"
0 0 24 29 1 #"\n"
0 0 17 3 102
(13
 #";usage : (move-to-left-son arbol) = retorna el lado izquierdo del "
 #"\xC3\xA1rbol binario en sintaxis abstracta"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"move-to-left-son"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 4 #"left"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Pruebas :"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbol1"
0 0 24 3 2 #" ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 2 #" ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"31"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbol1"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101 12 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";move-to-right-son : bintree \342\206\222 list"
0 0 24 29 1 #"\n"
0 0 17 3 101
(14
 #";usage : (move-to-right-son arbol) = retorna el lado derecho del \xC3"
 #"\xA1rbol binario en sintaxis abstracta"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"move-to-right-son"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 14 3 5 #"right"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";Pruebas :"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbol2"
0 0 24 3 2 #" ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"12"
0 0 24 3 2 #" ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"31"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbol2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101 12 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";number\342\206\222bintree : number \342\206\222 list"
0 0 24 29 1 #"\n"
0 0 17 3 110
(15
 #";usage : (number->bintree number) = retorna un \xC3\xA1rbol binario a"
 #"bstracto en donde la raiz en el numero recibido"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"number->bintree"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";pruebas :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"number->bintree"
0 0 24 3 1 #" "
0 0 21 3 2 #"93"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101 12 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";empty-bintree? : bintree \342\206\222 boolean"
0 0 24 29 1 #"\n"
0 0 17 3 74
(16
 #";usage : (empty-bintree arbol) = retorna si el \xC3\xA1rbol binario e"
 #"st\xC3\xA1 vac\xC3\xADo"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"empty-bintree?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";pruebas :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 2 #" ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101 12 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";at-leaf? : bintree \342\206\222 boolean"
0 0 24 29 1 #"\n"
0 0 17 3 75
(17
 #";usage : (at-leaf arbol) = retorna si el nodo del arbol binario es un"
 #"a hoja"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"at-leaf?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";pruebas :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"at-leaf?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101 12 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 55
#";bintree-with-at-least-one-child? : bintree \342\206\222 boolean"
0 0 24 29 1 #"\n"
0 0 17 3 112
(18
 #";usage : (bintree-with-at-least-one-child? arbol) = retorna si el nod"
 #"o del \xC3\xA1rbol binario tiene al menos un hijo"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 32 #"bintree-with-at-least-one-child?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #"("
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";pruebas :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 32 #"bintree-with-at-least-one-child?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"38"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101 12 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";insert-to-left : num bintree \342\206\222 list"
0 0 24 29 1 #"\n"
0 0 17 3 118
(19
 #";usage : (insert-to-left num arbol) = retorna un \xC3\xA1rbol binario"
 #" abstracto que inserta al lado izquierdo el numero dado"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"insert-to-left"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 3 #") ("
0 0 14 3 15 #"number->bintree"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 3 #") ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";pruebas :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 14 #"insert-to-left"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101 12 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";insert-to-right : num bintree \342\206\222 raiz"
0 0 24 29 1 #"\n"
0 0 17 3 117
(20
 #";usage : (insert-to-right num arbol) = retorna un \xC3\xA1rbol binari"
 #"o abstracto que inserta al lado derecho el numero dado"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"insert-to-right"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #" () "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 3 #") ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 3 #") ("
0 0 14 3 15 #"number->bintree"
0 0 24 3 1 #" "
0 0 14 3 6 #"number"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";pruebas :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 15 #"insert-to-right"
0 0 24 3 1 #" "
0 0 21 3 2 #"27"
0 0 24 3 2 #" ("
0 0 14 3 14 #"insert-to-left"
0 0 24 3 1 #" "
0 0 21 3 1 #"9"
0 0 24 3 2 #" ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"18"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 101 12 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";bintree-order-validation : bintree \342\206\222 boolean"
0 0 24 29 1 #"\n"
0 0 17 3 102
(21
 #";usage : (bintree-order-validation arbol) = retorna si el \xC3\xA1rbo"
 #"l binario esta organizado correctamente"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"bintree-order-validation"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 14 #"aux-validation"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 3 #") ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 14 #"aux-validation"
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 3 #") ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 54
#";aux-validation : pred X current X bintree \342\206\222 boolean"
0 0 24 29 1 #"\n"
0 0 17 3 140
(22
 #";usage : (aux-validation arbol) = mira si el arbol esta vacio (ya est"
 #"\xC3\xA1 ordenado) o si no, retorna los valores para comparar en la p"
 #"rincipal"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"aux-validation"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 7 #"current"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";pruebas :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbol3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"8"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"6"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"14"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"node"
0 0 24 3 1 #" "
0 0 21 3 2 #"13"
0 0 24 3 2 #" ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 3 #") ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 24 #"bintree-order-validation"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbol3"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 101 12 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 57
(23
 #";insert-element-into-bintree : arbol n \xE2\x86\x92 \xC3\xA1rbol bina"
 #"rio"
) 0 0 24 29 1 #"\n"
0 0 17 3 104
(24
 #";usage : (insert-element-into-bintree arbol n) = retorna el \xC3\xA1r"
 #"bol binario con el nuevo n\xC3\xBAmero a\xC3\xB1adido"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbol"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"bintree"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"empty-bintree"
0 0 24 3 4 #" () "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"left"
0 0 24 3 1 #" "
0 0 14 3 5 #"right"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 14 #"empty-bintree?"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 3 #") ("
0 0 14 3 15 #"number->bintree"
0 0 24 3 1 #" "
0 0 14 3 1 #"n"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"node"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 4 #")  ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 3 #") ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 3 2 #" ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"              [("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 15 #"current-element"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 16 #"move-to-left-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 3 2 #" ("
0 0 14 3 17 #"move-to-right-son"
0 0 24 3 1 #" "
0 0 14 3 5 #"arbol"
0 0 24 3 2 #") "
0 0 14 3 1 #"n"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"            ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";pruebas :"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 27 #"insert-element-into-bintree"
0 0 24 3 1 #" "
0 0 14 3 6 #"arbol3"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0           0
